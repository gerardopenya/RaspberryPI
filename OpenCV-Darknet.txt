Se resumen los pasos para instalar openCV en la raspberryPi y se anexa al final la pagina de donde se tomaron.
Esto se hizo para ser utilizado con la darknet tambien.

Con una imagen recien bajada de raspbian en abril 7 del 2018  Raspbian STRETCH 

Despues de ejecutar los comandos 

sudo apt-get update
sudo apt-get upgrade

-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
OPENCV EN LINUX
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
Instalacion de openCV.
Se encontro un script para instalarlo en una computadora con linux
https://github.com/milq/milq/blob/master/scripts/bash/install-opencv.sh

######################################
# INSTALL OPENCV ON UBUNTU OR DEBIAN #
######################################

# |         THIS SCRIPT IS TESTED CORRECTLY ON         |
# |----------------------------------------------------|
# | OS             | OpenCV       | Test | Last test   |
# |----------------|--------------|------|-------------|
# | Ubuntu 17.04   | OpenCV 3.4.1 | OK   | 14 Mar 2018 |
# | Debian 9.3     | OpenCV 3.4.0 | OK   | 17 Feb 2018 |
# | Ubuntu 16.04.2 | OpenCV 3.2.0 | OK   | 20 May 2017 |
# | Debian 8.8     | OpenCV 3.2.0 | OK   | 20 May 2017 |
# | Debian 9.0     | OpenCV 3.2.0 | OK   | 25 Jun 2017 |

# VERSION TO BE INSTALLED

OPENCV_VERSION='3.4.1'


# 1. KEEP UBUNTU OR DEBIAN UP TO DATE

sudo apt-get -y update
sudo apt-get -y upgrade
sudo apt-get -y dist-upgrade
sudo apt-get -y autoremove


# 2. INSTALL THE DEPENDENCIES

# Build tools:
sudo apt-get install -y build-essential cmake

# GUI (if you want to use GTK instead of Qt, replace 'qt5-default' with 'libgtkglext1-dev' and remove '-DWITH_QT=ON' option in CMake):
sudo apt-get install -y qt5-default libvtk6-dev

# Media I/O:
sudo apt-get install -y zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev

# Video I/O:
sudo apt-get install -y libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev

# Parallelism and linear algebra libraries:
sudo apt-get install -y libtbb-dev libeigen3-dev

# Python:
sudo apt-get install -y python-dev python-tk python-numpy python3-dev python3-tk python3-numpy

# Java:
sudo apt-get install -y ant default-jdk

# Documentation:
sudo apt-get install -y doxygen


# 3. INSTALL THE LIBRARY

sudo apt-get install -y unzip wget
wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip
unzip ${OPENCV_VERSION}.zip
rm ${OPENCV_VERSION}.zip
mv opencv-${OPENCV_VERSION} OpenCV
cd OpenCV
mkdir build
cd build
cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -DENABLE_PRECOMPILED_HEADERS=OFF ..
make -j4
sudo make install
sudo ldconfig


# 4. EXECUTE SOME OPENCV EXAMPLES AND COMPILE A DEMONSTRATION

# To complete this step, please visit 'http://milq.github.io/install-opencv-ubuntu-debian'.





-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
OPENCV EN RASPBERRY PI CON RASPBIAN STRETCH
-------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

En una instalacion completamente nueva del sistema

Se recupera algo de espacio:
sudo apt-get purge wolfram-engine
sudo apt-get purge libreoffice*
sudo apt-get clean
sudo apt-get autoremove


2)  Se expande el filesistem de la raspberry 

3)  Se actualiza

sudo apt-get update -y
sudo apt-get upgrade
sudo apt-get update -y

Basicamente despues de un upgrade es buena idea hacer nuevamente un update

3) SE REINICIA LA RASPBERRY

4) se instalan dependencias

sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk2.0-dev libgtk-3-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3-dev

cd ~
wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.3.0.zip
unzip opencv.zip

wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.3.0.zip
unzip opencv_contrib.zip

wget https://bootstrap.pypa.io/get-pip.py
sudo python get-pip.py
sudo python3 get-pip.py

sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/.cache/pip



5) se edita el archivo ~/.profile agregando las siguientes lineas al final

# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

6) se recarga el perfil con los cambios
source ~/.profile

EN ESTE PUNTO TUVE PROBLEMAS YA QUE AL PARECER NO ENCONTRABA LO NECESARIO PARA EJECUTAR virtualenvwrapper POR LO QUE TUVE QUE AGREGAR ESTA LINEA JUSTO ANTES DE LAS DOS ANTERIORES EN EL ARCHIVO ~/.profile 
Como se indica en 
https://stackoverflow.com/questions/23997403/installed-virtualenv-and-virtualenvwrapper-python-says-no-module-named-virtuale

VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.5

7) Se crea el ambiente virtual para python3
mkvirtualenv cv -p python3

8) En este punto se debe estar dentro del ambiente virtual cv recien creado.
Si por alguna razon no estamos en el se deben ejecutar estos comandos:
source ~/.profile
workon cv

9) se continua con dependencias para la compilacion
pip install numpy

10) se construye el opencv

cd ~/opencv-3.3.0/
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules \
    -D BUILD_EXAMPLES=ON ..


10) se cambian los permisos del archivo /etc/dphys-swapfile
sudo chmod 666 /etc/dphys-swapfile

11) se edita el archivo /etc/dphys-swapfile basicamente esto permitira llamar al comando make con el parametro -j4 para utilizar los 4 nucleos

# set size to absolute value, leaving empty (default) then uses computed value
#   you most likely don't want this, unless you have an special disk situation
# CONF_SWAPSIZE=100
CONF_SWAPSIZE=1024

ES RECOMENDADO REGRESAR AL VALOR ORIGINAL DESPUES DE LA INSTALACION YA QUE LA MEMORIA MICRO SD DONDE ESTA EL SISTEMA OPERATIVO PUEDE SUFRIR DANYOS

12) se reinicia el servicio del archivo swap

sudo /etc/init.d/dphys-swapfile stop
sudo /etc/init.d/dphys-swapfile start

13) SE ejecuta el make para reconstruir el openCV y 

make -j4


14) al terminar la compilacion se verifica que exista un archivo en la ruta 

ls -l /usr/local/lib/python3.5/site-packages/
total 1852
-rw-r--r-- 1 root staff 1895932 Mar 20 21:51 cv2.cpython-34m.so

El archivo puede tener distintos nombres pero debe renombrarse

15) renombrar archivo 

cd /usr/local/lib/python3.5/site-packages/
sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv2.so

16) se crea un link en la ruta de los virtual envs

cd ~/.virtualenvs/cv/lib/python3.5/site-packages/
ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so

17) se abre una nueva terminal y se ejecutan los siguientes comandos para verificar la instalacion

source ~/.profile 
workon cv
python
>>> import cv2
>>> cv2.__version__
'3.3.0'
>>>

18) se pueden ahora borrar las rutas con los fuentes

rm -rf opencv-3.3.0 opencv_contrib-3.3.0

19) se devuelve el archivo /etc/dphys-swapfile a su estado original revirtuiendo los cambios en el paso 11

20) se recambian los permisos sobre el archivo /etc/dphys-swapfile
Sudo cmod 644 dphys-swapfile

21) se re ejecuta el paso 12


+++++++++++++++=============================================================================================================================================================
	Instalacion de darknet

============================================================================================================================================================================

Se clono Darknet y se recompilo. Todo esto lo hice dentro del ambiente virutal y al final del proceso la prueba de instalacion de darknet funciono incluso fuera del ambiente.

git clone https://github.com/pjreddie/darknet.git
cd darknet


Se modifican los permisos del archivo Makefile
Sudo chmod 664 Makefile

Se edita el archivo Makefile indicando que se usara opencv
OPENCV=1

Se recompila el proyecto

make



El proceso fue exitoso ya que al teclear 

./darknet


Se obtuvo 

usage: ./darknet <function>


Prueba de utilizacion

./darknet imtest data/eagle.jpg












************************************************************************************************
history 
incluye comandos de la instalacion de hiperledger que quedo incompleta

    1  sudo raspi-config
    2  sudo apt-get install 
    3  sudo apt-get install build-essential
    4  sudo apt-get install cmake
    5  sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
    6  wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.3.0.zip
    7  unzip opencv_contrib.zip 
    8  sudo python3 get-pip.py
    9  ls ~/.profile 
   10  source ~/.profile 
   11  sudo apt-get wolfram-engine
   12  sudo apt-get purge wolfram-engine
   13  sudo apt-get purge libreoffice*
   14  sudo apt-get clean
   15  sudo apt-get autoremove
   16  sudo apt-get update && sudo apt_get upgrade
   17  sudo apt-get update
   18  sudo apt-get upgrade
   19  sudo apt-get update
   20  sudo apt-get install pkg-config
   21  sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
   22  sudo apt-get install libxvidcore-dev libx264-dev
   23  sudo apt-get install libgtk2.0-dev libgtk-3-dev
   24  sudo apt-get install libatlas-base-dev gfortran
   25  sudo apt-get install python2.7-dev python3-dev
   26  cd ~
   27  wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.3.0.zip
   28  unzip opencv.zip 
   29  wget https://bootstrap.pypa.io/get-pip.py
   30  sudo python get-pip.py
   31  sudo pip install virtualenv virtualenvwrapper
   32  sudo rm -rf ~/.cache/pip
   33  sudo pip install virtualenv virtualenvwrapper
   34  source ~/.profile 
   35  sudo rm -rf ~/.cache/pip
   36  sudo pip install virtualenv virtualenvwrapper
   37  source ~/.profile 
   38  cd ..
   39  cd etc/
   40  ls dphys-swapfile 
   41  ls -l dphys-swapfile 
   42  sudo chmode 666  dphys-swapfile 
   43  sudo chmod 666  dphys-swapfile 
   44  sudo chmod 644  dphys-swapfile 
   45  sudo dphys-swapfile stop
   46  sudo /etc/init.d/dphys-swapfile stop
   47  sudo /etc/init.d/dphys-swapfile start
   48  ls
   49  cd ~
   50  cd ..
   51  cd etc/
   52  ls
   53  ls -l dph*
   54  sudo chmod
   55  sudo chmod 700 dphys-swapfile 
   56  sudo chmod 711 dphys-swapfile 
   57  sudo chmod 766 dphys-swapfile 
   58  sudo chmod 764 dphys-swapfile 
   59  sudo chmod 744 dphys-swapfile 
   60  sudo chmod 774 dphys-swapfile 
   61  sudo chmod 764 dphys-swapfile 
   62  sudo chmod 664 dphys-swapfile 
   63  sudo chmod 666 dphys-swapfile 
   64  workon cv
   65  python
   66  cd ~
   67  ls
   68  git clone https://github.com/pjreddie/darknet.git
   69  cd darknet/
   70  make
   71  ./darknet
   72  ls
   73  sudo chmod 644 Makefile 
   74  sudo chmod 664 Makefile 
   75  make clean
   76  make
   77  ./darknet
   78  ./darknet imtest data/eagle.jpg
   79  sudo python3 get-pip.py
   80  sudo pip install virtualenv virtualenvwrapper
   81  sudo rm -rf ~/.cache/pip
   82  source ~/.profile 
   83  sudo apt-get remove virutalenv
   84  sudo apt-get remove --auto-remove virtualenv
   85  sudo apt-get purge python-virutalenv
   86  sudo apt-get purge --auto-remove python-virutalenv
   87  source ~/.profile 
   88  wget https://bootstrap.pypa.io/get-pip.py
   89  sudo python get-pip.py
   90  sudo python3 get-pip.py
   91  sudo pip install virtualenv virtualenvwrapper
   92  sudo rm -rf ~/.cache/pip
   93  source ~/.profile 
   94  pip --version
   95  ls -l $VIRTUALENVWRAPPER_PYTHON
   96  source ~/.profile 
   97  mkvirtualenv cv -p python3
   98  cd ~/opencv-3.3.0/
   99  cd build
  100  pwd
  101  mkdir build
  102  cd build
  103  cmake -D CMAKE_BUILD_TYPE=RELEASE     -D CMAKE_INSTALL_PREFIX=/usr/local     -D INSTALL_PYTHON_EXAMPLES=ON     -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules     -D BUILD_EXAMPLES=ON ..
  104  sudo /etc/init.d/dphys-swapfile stop
  105  sudo /etc/init.d/dphys-swapfile start
  106  make -j4
  107  sudo make install
  108  sudo ldconfig
  109  ls -l /usr/local/lib/python3.5/
  110  ls -l /usr/local/lib/python3.5/site-packages/
  111  cd /usr/local/lib/python3.5/site-packages/
  112  ls
  113  sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv2.so
  114  ls
  115  cd ~/.virtualenvs/cv/lib/python3.5/site-packages/
  116  ls
  117  ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so
  118  ls
  119  cd darknet/
  120  ./darknet 
  121  ./darknet imtest data/giraffe.jpg 
  122  sudo chmod -r 777 go
  123  sudo chmod 777 -r go
  124  sudo chmod -r go 777
  125  sudo chmod  777
  126  sudo chmod  777 go
  127  ls
  128  chmod /help
  129  chmod --help
  130  sudo chmod  -R 777 go
  131  yo
  132  yo --generators
  133  cd geth-linux-amd64-1.8.3-329ac18e/
  134  ls
  135  cd ..
  136  cd geth-linux-amd64-1.8.3-329ac18e/
  137  rm *
  138  ls
  139  cd ..
  140  rm geth-linux-amd64-1.8.3-329ac18e/
  141  rm -d geth-linux-amd64-1.8.3-329ac18e/
  142  cat /proc/cpuinfo 
  143  cat /proc/cpuinfo |grep ARM
  144  git clone https://github.com/ethereum/go-ethereum
  145  ls
  146  go-ethereum/
  147  cd go-ethereum/
  148  ls
  149  make geth
  150  sudo make geth
  151  sudo apt-get -y install dphys-swapfile build-essential libgmp3-dev golang git python curl
  152  sudo apt-get update
  153  dpkg --list
  154  dpkg --list | grep go
  155  dpkg --list | grep gol
  156  sudo apt-get --purge remove golang
  157  sudo apt-get autoremove
  158  dpkg --list | grep go
  159  cd ..
  160  ls
  161  ls -l
  162  LS
  163  ls
  164  chmod --help
  165  sudo chmod -F 777 geth-linux-arm7-1.8.3-329ac18e
  166  sudo chmod -R 777 geth-linux-arm7-1.8.3-329ac18e
  167  node -v
  168  git --version
  169  python --version
  170  npm --version
  171  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
  172  export NVM_DIR="$HOME/.nvm"
  173  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  174  command -v nvm
  175  nvm install node
  176  node -v
  177  nvm install node 8
  178  nvm install 8
  179  nvm use 8
  180  nvm use 9
  181  npm
  182  npm -version
  183  npm update -g npm
  184  npm -version
  185  npm update -g git
  186  git -v
  187  git --version
  188  python --version
  189  npm install -g yo
  190  npm install -g composer-cli
  191  composer -v
  192  nvm use 8
  193  npm install -g composer-rest-server
  194  composer-rest-server -v
  195  npm install -g generator-hyperledger-composer
  196  yo --generators
  197  docker -v
  198  curl -sSL https://get.docker.com | sh
  199  sudo usermod -aG docker pi
  200  docker run hello-world
  201  sudo docker run hello-world
  202  env | grep DOCKER
  203  sudo docker run hello-world
  204  mkdir  workspace/fabric-tools
  205  ls
  206  mkdir workspace
  207  cd workspace/
  208  mkdir fabric-tools
  209  cd fabric-tools/
  210  curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gz
  211  ls
  212  tar -xvf fabric-dev-servers.tar.gz 
  213  ls
  214  ls -l
  215  docker run hello-world
  216  docker -v
  217  source ~/.profile 
  218  workon cv
  219  cd go-ethereum/
  220  ls
  221  make geth
  222  cd ..
  223  sudo curl -O https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz
  224  ls
  225  rm -r go1.9.1.linux-amd64.tar.gz 
  226  sudo curl -O https://storage.googleapis.com/golang/go1.10.1.linux-arm64.tar.gz
  227  sudo tar -xvf go1.10.1.linux-arm64.tar.gz 
  228  ls
  229  $PATH
  230  LS
  231  ls
  232  source ~/.profile 
  233  go version
  234  cat /proc/cpuinfo 
  235  ls
  236  sudo curl -O https://storage.googleapis.com/golang/go1.10.1.linux-arm32.tar.gz
  237  go version
  238  sudo curl -O https://storage.googleapis.com/golang/go1.10.1.linux-armv64.tar.gz
  239  sudo curl -O https://storage.googleapis.com/golang/go1.10.1.linux-armv61.tar.gz
  240  sudo curl -O https://storage.googleapis.com/golang/go1.10.1.linux-armv6l.tar.gz
  241  sudo tar -xvf go1.10.1.linux-armv64.tar.gz 
  242  sudo tar -xvf go1.10.1.linux-armv6l.tar.gz 
  243  go version
  244  sudo apt-get ethereum
  245  sudo apt-get install ethereum
  246  ls
  247  go get -d github.com/ethereum/go-ethereum
  248  go help gopath
  249  $HOME
  250  pwd
  251  mkdir goWork
  252  export GOPATH=$HOME/goWork
  253  GOPATH
  254  $GOPATH
  255  go get -d github.com/ethereum/go-ethereum
  256  geth
  257  pwd
  258  cd go-ethereum/
  259  ls
  260  cd bi
  261  ls
  262  cd build
  263  ls
  264  cd ..
  265  ls --help
  266  ls -R geth*
  267  ls
  268  ls -R eth*
  269  ls -R geth*
  270  cd ..
  271  sudo tar -xvf geth-linux-arm7-1.8.3-329ac18e.tar.gz 
  272  cd geth-linux-arm7-1.8.3-329ac18e/
  273  ls
  274  cd get
  275  ls
  276  cd ge
  277  cd geth
  278  geth
  279  sudo geth
  280  ls
  281  ls -l
  282  sudo geth
  283  sudo ./geth
  284  ls
  285  cd ..
  286  pwd
  287  ls
  288  sudo tar -xvf geth-alltools-linux-arm7-1.8.3-329ac18e.tar.gz 
  289  pwd
  290  ls
  291  ls geth
  292  hostory
  293  history
  294  source ~/.profile 
  295  $geth
  296  $GETH
  297  geth
  298  $GOPATH
  299  echo $GOPATH
  300  source ~/.profile 
  301  echo $GOPATH
  302  echo $PATH
  303  source ~/.profile 
  304  echo $PATH
  305  source ~/.profile 
  306  echo $PATH
  307  source ~/.profile 
  308  ls
  309  pwd
  310  cd go
  311  find workspace
  312  find
  313  find | grep workspace
  314  cd ..
  315  cd ~
  316  pwd
  317  find | grep workspace
  318  ls workspace/
  319  CD ..
  320  cd..
  321  cd ..
  322  mkdir github
  323  sudo mkdir -p github
  324  cd github/
  325  sudo mkdir -p hyperledger
  326  cd hyperledger/
  327  git clone https://github.com/hyperledger/fabric-baseimage.git
  328  sudo git clone https://github.com/hyperledger/fabric-baseimage.git
  329  sudo git clone https://github.com/hyperledger/fabric.git
  330  ls
  331  cd fabric-baseimage/
  332  sudo make docker-local
  333  make -f Makefile
  334  sudo make -f Makefile
  335  ls
  336  sudo make clean
  337  ls
  338  rm -fr *
  339  sudo rm -fr *
  340  ls
  341  docker pull frbrkoala/fabric-baseimage
  342  sudo docker pull frbrkoala/fabric-baseimage
  343  ls
  344  go version
  345  docker -v
  346  docker-compose -v
  347  python -v
  348  python --version
  349  sudo pip install behave nose docker-compose
  350  docker-compose -v
  351  echo @GOPATH
  352  echo $GOPATH
  353  CD ..
  354  cd ..
  355  ls
  356  cd ..
  357  ls
  358  rm -rf github/*
  359  ls -l  github/*
  360  sudo rm -rf github/*
  361  ls -l  github/*
  362  sudo mkdir github.com
  363  sudo rm -rf github
  364  ls -l  github
  365  cd github.com/
  366  sudo mkdir hyperledger
  367  ls
  368  cd hyperledger/
  369  ls
  370  git clone -b armv7l-0.3.2 https://github.com/Cleanshooter/fabric-baseimage.git
  371  sudo git clone -b armv7l-0.3.2 https://github.com/Cleanshooter/fabric-baseimage.git
  372  sudo git clone -b release-1.0 https://github.com/hyperledger/fabric.git
  373  cd fabric-baseimage/
  374  make docker
  375  sudo make docker
  376  cd ..
  377  cd fabric
  378  ls
  379  make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  380  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  381  echo $GOPATH
  382  source ~/.profile 
  383  echo $GOPATH
  384  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  385  cat ~/.profile 
  386  source ~/.profile 
  387  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  388  source ~/.profile 
  389  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  390  source ~/.profile 
  391  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  392  source ~/.profile 
  393  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  394  source ~/.profile 
  395  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  396  source ~/.profile 
  397  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  398  source ~/.profile 
  399  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  400  go version
  401  source ~/.profile 
  402  go version
  403  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  404  source ~/.profile 
  405  go version
  406  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  407  source ~/.profile 
  408  go version
  409  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  410  GO
  411  go
  412  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  413  whereis go
  414  source ~/.profile 
  415  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  416  whereis go
  417  source ~/.profile 
  418  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  419  source ~/.profile 
  420  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  421  go env
  422  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  423  go
  424  cd ~
  425  cd workspace/
  426  cd fabric
  427  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  428  cd ~
  429  cd go
  430  ls
  431  cd src
  432  ls
  433  cd github.com/
  434  ls
  435  cd hyperledger/
  436  ls
  437  cd fabric
  438  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  439  go
  440  make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  441  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  442  make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  443  sudo make native docker license spelling linter unit-test BASE_DOCKER_NS=jmotacek ARCH=armv7l BASEIMAGE_RELEASE=0.3.2
  444  sudo go
  445  sudo source ~/.profile 
  446  source ~/.profile 
  447  sudo go
  448  history
  449  ifconfig
  450  history > history.txt
